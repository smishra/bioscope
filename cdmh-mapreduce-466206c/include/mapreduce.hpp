/*
    MapReduce library

    Copyright (C) 2009 Craig Henderson.
    cdm.henderson@gmail.com

    Use, modification and distribution is subject to the
    Boost Software License, Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

#ifndef MAPREDUCE_HPP
#define MAPREDUCE_HPP

#ifdef BOOST_MSVC
#   if !defined(__SGI_STL_PORT)
#       pragma message("warning: using STLPort is recommended to avoid STL container performance problems in MSVC supplied libraries.")
#       if _SECURE_SCL
#           pragma message("warning: using MSVC with _SECURE_SCL=1 defined can cause serious runtime performance degradation.")
#       endif
#   endif
#endif

#include <string>
#include <vector>
#include <boost/config.hpp>
#include <boost/noncopyable.hpp>
#include <boost/cstdint.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>

namespace mapreduce {

struct specification
{
    unsigned         map_tasks;             // ideal number of map tasks to use
    unsigned         reduce_tasks;          // ideal number of reduce tasks to use
    boost::uintmax_t max_file_segment_size; // ideal maximum number of bytes in each input file segment
    std::string      output_filespec;       // filespec of the output files - can contain a directory path if required
    std::string      input_directory;       // directory path to scan for input files

    specification()
      : map_tasks(0),                   
        reduce_tasks(1),
        max_file_segment_size(1048576L),    // default 1Mb
        output_filespec("mapreduce_")   
    {
    }
};

struct results
{
    struct tag_counters
    {
        unsigned actual_map_tasks;      // number of map tasks actually used
        unsigned actual_reduce_tasks;   // number of reduce tasks actually used

        // counters for map key processing
        unsigned map_keys_executed;
        unsigned map_key_errors;
        unsigned map_keys_completed;

        // counters for reduce key processing
        unsigned reduce_keys_executed;
        unsigned reduce_key_errors;
        unsigned reduce_keys_completed;

        unsigned num_result_files;      // number of result files created

        tag_counters()
          : actual_map_tasks(0),
            actual_reduce_tasks(0),
            map_keys_executed(0),
            map_key_errors(0),
            map_keys_completed(0),
            reduce_keys_executed(0),
            reduce_key_errors(0),
            reduce_keys_completed(0),
            num_result_files(0)
        {
        }
    } counters;

    boost::posix_time::time_duration                job_runtime;
    boost::posix_time::time_duration                map_runtime;
    boost::posix_time::time_duration                shuffle_runtime;
    boost::posix_time::time_duration                reduce_runtime;
    std::vector<boost::posix_time::time_duration>   map_times;
    std::vector<boost::posix_time::time_duration>   shuffle_times;
    std::vector<boost::posix_time::time_duration>   reduce_times;
};

}   // namespace mapreduce

#include <boost/throw_exception.hpp>
#include "detail/platform.hpp"
#include "detail/mergesort.hpp"
#include "detail/intermediates.hpp"
#include "detail/schedule_policy.hpp"
#include "detail/datasource.hpp"
#include "detail/null_combiner.hpp"
#include "detail/job.hpp"

namespace mapreduce {

template<typename Job>
void run(mapreduce::specification &spec, mapreduce::results &result)
{
    typename Job::datasource_type datasource(spec);
    Job job(datasource, spec);
    job.run<mapreduce::schedule_policy::cpu_parallel<Job> >(result);
}

}   // namespace mapreduce

#endif  // MAPREDUCE_HPP
