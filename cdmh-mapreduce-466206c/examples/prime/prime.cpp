/*
    MapReduce library

    Copyright (C) 2009 Craig Henderson.
    cdm.henderson@gmail.com

    Use, modification and distribution is subject to the
    Boost Software License, Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

// The prime number code is based on work from Christian Henning [chhenning@gmail.com]
#define _SECURE_SCL 0
#define _HAS_ITERATOR_DEBUGGING 0

#include <boost/config.hpp>
#if defined(BOOST_MSVC)
#   pragma warning(disable: 4127)
#endif

// turn off checked iterators to avoid performance hit
#if defined(BOOST_MSVC)  &&  !defined(__SGI_STL_PORT)  &&  !defined(_DEBUG)
#define _SECURE_SCL 0
#endif

#include "mapreduce.hpp"

namespace prime_calculator {

bool const is_prime(long const number)
{
    if (number == 0 || number == 1)
        return false;
    else if (number == 2)
        return true;
    else if (number%2 == 0)
        return false;

    long n = std::abs(number);
    long const sqrt_number = static_cast<long>(std::sqrt(static_cast<double>(n)));

    for (long i = 3; i < sqrt_number; i+=2)
    {
        if (n % i == 0)
            return false;
    }

    return true;
}

template<typename MapTask>
class number_source : boost::noncopyable
{
  public:
    number_source(long first, long last, long step)
      : current_(first), last_(last), step_(step)
    {
    }

    const bool setup_key(typename MapTask::key_type &key)
    {
        if (current_ > last_)
            return false;

        key = current_;
        current_ = std::min(current_ + step_, last_+1);
        return true;
    }

    const bool get_data(typename MapTask::key_type &key, typename MapTask::value_type &value) const
    {
        value = std::min(key + step_ - 1, last_);
        return true;
    }

  private:
    long step_;
    long last_;
    long current_;
};

struct map_task : public mapreduce::map_task<long, long>
{
    template<typename Runtime>
    void operator()(Runtime &runtime, key_type const &key, value_type const &value) const
    {
        BOOST_STATIC_ASSERT((boost::is_same<key_type, value_type>::value));
        for (key_type loop=key; loop<=value; ++loop)
            runtime.emit_intermediate(is_prime(loop), loop);
    }
};

struct reduce_task : public mapreduce::reduce_task<bool, long>
{
    template<typename Runtime, typename It>
    void operator()(Runtime &runtime, key_type const &key, It it, It ite) const
    {
        if (key)
            for_each(it, ite, boost::bind(&Runtime::emit, &runtime, true, _1));
    }
};

typedef
mapreduce::job<prime_calculator::map_task
                     , prime_calculator::reduce_task
                     , mapreduce::null_combiner
                     , prime_calculator::number_source<prime_calculator::map_task>
> job;

} // namespace prime_calculator

int main(int, char *[])
{
    mapreduce::specification spec;
    spec.map_tasks    = 0;
    spec.reduce_tasks = std::max(1U, boost::thread::hardware_concurrency());

    int const prime_limit = 100;
    prime_calculator::job::datasource_type datasource(0, prime_limit, prime_limit/spec.reduce_tasks);


    std::cout <<"\nRunning Parallel Prime_Calculator MapReduce..." <<std::endl;
    prime_calculator::job job(datasource, spec);
    mapreduce::results result;
#ifdef _DEBUG
    job.run<mapreduce::schedule_policy::sequential<prime_calculator::job> >(result);
#else
    job.run<mapreduce::schedule_policy::cpu_parallel<prime_calculator::job> >(result);
#endif
    std::cout <<"\nMapReduce Finished." <<std::endl;

    for (prime_calculator::job::const_result_iterator it = job.begin_results();
         it!=job.end_results();
         ++it)
    {
        std::cout <<it->second <<" ";
    }

	return 0;
}
