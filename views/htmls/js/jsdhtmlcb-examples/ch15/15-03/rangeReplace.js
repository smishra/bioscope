// Global range object variablevar rng;// Return TextRange.findText() third parameter argumentsfunction getArgs(caseSensitive, wholeWord) {    var isCaseSensitive = (caseSensitive) ? 4 : 0;    var isWholeWord = (wholeWord) ? 2 : 0;    return isCaseSensitive ^ isWholeWord;}// Unprompted search and replacefunction srBatch(container, search, replace, caseSensitive, wholeWord) {    if (search) {        var args = getArgs(caseSensitive, wholeWord);        rng = document.body.createTextRange();        rng.moveToElementText(container);        clearUndoBuffer();        for (var i = 0; rng.findText(search, 1000000, args); i++) {            rng.text = replace;            pushUndoNew(rng, search, replace);            rng.collapse(false)  ;           }    }}// Prompted search and replacefunction srQuery(container, search, replace, caseSensitive, wholeWord) {    if (search) {        var args = getArgs(caseSensitive, wholeWord);        rng = document.body.createTextRange();        rng.moveToElementText(container);        clearUndoBuffer();        while (rng.findText(search, 10000, args)) {            rng.select();            rng.scrollIntoView();            if (confirm("Replace?")) {                rng.text = replace;                pushUndoNew(rng, search, replace);            }            rng.collapse(false)  ;        }        }}/****************    UNDO BUFFER*****************/// Temporary storage of undo informationvar undoObject = {origSearchString:"",newRanges :[]};// Store original search string and bookmarks of each replaced rangefunction pushUndoNew(rng, srchString, replString) {    undoObject.origSearchString = srchString;    rng.moveStart("character", -replString.length);    undoObject.newRanges[undoObject.newRanges.length] = rng.getBookmark();}// Empty array and search string globalfunction clearUndoBuffer() {    undoObject.origSearchString = "";    undoObject.newRanges.length = 0;}// Perform the undofunction undoReplace() {    if (undoObject.newRanges.length && undoObject.origSearchString) {        for (var i = 0; i < undoObject.newRanges.length; i++) {            rng.moveToBookmark(undoObject.newRanges[i]);            rng.text = undoObject.origSearchString;        }        clearUndoBuffer();    }}